  await setDoc(doc(db, "users", user.uid), {
          firstName: fname,
          lastName: lname,
        });
        user.updateProfile({ displayName: fname + " " + lname });
        setEmail("");
        setPassword("");
        setFname("");
        setLname("");
        alert("User registered successfully");








////carousell arrow settings

        prevArrow={({ handlePrev }) => (
          <IconButton
            variant="text"
            color="white"
            size="lg"
            onClick={handlePrev}
            className="!absolute hidden lg:inline-block hover:bg-gray-100 bg-white rounded-full text-[#6C7275] top-2/4 left-4 -translate-y-2/4"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
              strokeWidth={2}
              stroke="currentColor"
              className="h-6 w-6"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                d="M10.5 19.5L3 12m0 0l7.5-7.5M3 12h18"
              />
            </svg>
          </IconButton>
        )}
        nextArrow={({ handleNext }) => (
          <IconButton
            variant="text"
            color="white"
            size="lg"
            onClick={handleNext}
            className="!absolute hidden lg:inline-block hover:bg-gray-100 bg-white rounded-full text-[#6C7275]  top-2/4 !right-4 -translate-y-2/4"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
              strokeWidth={2}
              stroke="currentColor"
              className="h-6 w-6"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                d="M13.5 4.5L21 12m0 0l-7.5 7.5M21 12H3"
              />
            </svg>
          </IconButton>
        )}



           import { useGSAP } from "@gsap/react";
    import { useRef } from "react";
    import { ScrollTrigger } from "gsap/all";
    gsap.registerPlugin(ScrollTrigger);
  const CardRef = useRef();

  useGSAP(
    () => {
        
      gsap.to(".box", {
        rotation: 100,
        backgroundColor: "red",
        // delay: 1.5,
        // yoyo: true,
        // repeat: -1,
        x: 250,
        scale: 1.5,
        ease: "power1.inOut",
        borderRadius: 100,
        scrollTrigger: {
          trigger: ".box",
          start: "90% bottom ",
          end: "80% 70%",
        },
      });
    },
    { scope: CardRef }
  );

<Button
                href={step.cta.href}
                className="bg-gradient-to-br from-green-900 to-light-green-900 px-0 text-white rounded w-full"
              >
              </Button>


                 <form onSubmit={handleSignup}>
        <ToastContainer />
        <h3>Sign up</h3>
        <div className="mb-3">
          <label>First Name</label>
          <input
            type="text"
            placeholder="Enter first name"
            value={fullName}
            onChange={(e) => setFullName(e.target.value)}
          />
        </div>
  
        <div className="mb-3">
          <label>Email Address</label>
          <input
            type="email"
            placeholder="Enter email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
          />
        </div>
        <div className="mb-3">
          <label>Password</label>
          <input
            type="password"
            placeholder="Enter password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
          />
        </div>
        <div className="mb-3">
          <button type="submit">Sign up</button>
        </div>
      </form>


      ////// Nav tabb

         <div className=" w-[99.5%] sticky top-0 z-50 rounded-b-md  bg-gradient-to-tr from-green-700 to-green-900 shadow-md text-white px-3 items-center justify-between flex flex-row-reverse py-3 lg:py-2 cursor-pointer ">
        <h1
          onClick={handleBackHome}
          className="lg:text-2xl text-base font-semibold flex pop items-center"
        >
          <img src="images/FoodBank.png" className=" w-5 lg:w-8 " />
          FoodConnect
        </h1>{" "}
        <p
          className="flex  font-medium p-0 leading-none pop gap-1"
          onClick={handleBackHome}
        >
          <ImHome />
          Home
        </p>
      </div>



    // "build": "npm install --legacy-peer-deps && vercel build",


 <div className="w-1/4 h-screen shadow-xl flex gap-9 flex-col pop  items-center py-11 bg-white">
      <header className="font-bold  text-xl px-2">
        Food<span className="text-real">Connect</span>
      </header>
      <div>
        {ReceiverDashBoardLinks.map((dashlink) => (
          <div key={dashlink.id} className="">
            <NavLink
              to={dashlink.path}
              className="flex gap-3 dashReceiver p-2 items-center hover:bg-[#f7f7f7]"
            >
              {dashlink.icon} {dashlink.label}
            </NavLink>
          </div>
        ))}
      </div>
    </div>





         {/* <div className="  w-full absolute top-0 z-50 rounded-b-lg  bg-gradient-to-tr from-yellow-500 to-yellow-700 shadow-md text-black px-3 items-center justify-between flex flex-row-reverse py-3 lg:py-2 cursor-pointer ">
        <h1 onClick={handleBackHome} className="lg:text-2xl text-base font-semibold flex pop items-center">
          <img src="images/FoodBank.png" className=" w-5 lg:w-8 " />
          FoodConnect
        </h1>
        {" "}
        <p
          className="flex  font-medium p-0 leading-none pop gap-1"
          onClick={handleBackHome}
        >
          <ImHome />Home
        </p>
        
      </div> */}






      //////app .jsx

      import React, { useEffect, useState } from "react";
import {
  BrowserRouter,
  Navigate,
  Route,
  Routes,
  useLocation,
} from "react-router-dom";
import NProgress from "nprogress";
import "nprogress/nprogress.css";
import { Home } from "./pages/homepage/Home";
import { NavBar } from "./components/NavBar";
import { Footer } from "./components/Footer";
import { NotFound } from "./components/NotFound";
import { FooterContent } from "./components/FooterContent";
import About from "./pages/about/About";
import Works from "./pages/works/Works";
import Contact from "./pages/contact/Contact";
import Login from "./pages/account/Login";
import Signup from "./pages/account/Signup";
import Profile from "./pages/account/Profile";
import { auth, db } from "./utils/firebase";
import FoodConnectSignUp from "./pages/account/FoodConnectSignUp";
import UserType from "./components/UserType";
import Receiver from "./pages/dashboard/receiver/Receiver";
import AccDetails from "./components/AccDetails";
import Donor from "./pages/dashboard/donor/Donor";
import { onAuthStateChanged } from "firebase/auth";
import { doc, getDoc } from "firebase/firestore";
/// Import custom styles for nprogress

function App() {
  const [user, setUser] = useState(null);
  const location = useLocation();
  const [userId, setUserId] = useState(null);
  const [userType, setUserType] = useState("donor");
  const noNavBarFooterPath = [
    "/signup",
    "/login",
    "/user-type",
    "/receiver/dashboard",
    "/receiver/claimed-items",
    "/receiver/browse-food",
    "/receiver/profile",
    "/receiver/notifications",
    "/receiver/support",
  ];

  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, async (user) => {
      if (user) {
        setUserId(user.uid);
        try {
          const userDoc = await getDoc(doc(db, "FoodConnectUsers", user.uid));
          if (userDoc.exists()) {
            const userData = userDoc.data();
            setUserType(userData.fcUserType || "");
          }
        } catch (error) {
          console.log(error.message, "error while fetching fc user data");
        }
      } else {
        setUserId(null);
        setUserType("");
      }
    });

    return () => {
      unsubscribe();
    };
  }, [auth, db]);

  useEffect(() => {
    // Monitor authentication state
    const unsubscribe = auth.onAuthStateChanged((user) => {
      setUser(user);
    });

    return () => unsubscribe();
  }, []);

  return (
    <>
 
      {noNavBarFooterPath.includes(location.pathname) ? null : <NavBar />}
      {
      userType === "donor" ? <Routes>
        <Route path="/donor/*" element={<Donor />} />
      </Routes>: userType === "receiver" ? <Routes>
      <Route path="/receiver/*" element={<Receiver />} /> : null
      </Routes>
    }
      <Routes>
        <Route path="/" element={<Home />} />
        <Route path="/about-us" element={<About />} />
        <Route path="/user-type" element={<UserType />} />
        <Route path="/newform" element={<FoodConnectSignUp />} />
        <Route path="/how-it-works" element={<Works />} />
        <Route path="/contact-us" element={<Contact />} />
        <Route path="/:id" element={<FooterContent />} />
        <Route path="/profile" element={<Profile />} />
     

        <Route
          path="/login"
          // element={user ? <Navigate to="/receiver/dashboard" /> : <Login />}
          element={<Login />}
        />
        <Route path="/signup" element={<Signup />} />
        <Route path="*" element={<NotFound />} />
        <Route path="/donations" element={<AccDetails />} />
      </Routes>

      {noNavBarFooterPath.includes(location.pathname) ? null : <Footer />}
    </>
  );
}

const AppWrapper = () => (
  <BrowserRouter>
    <App />
  </BrowserRouter>
);

export default AppWrapper;


     <Checkbox
                  defaultChecked
                  className="checked:bg-black"
                  label={
                    <Typography
                      variant="small"
                      className="flexitems-center font-normal text-black pop"
                    >
                      I agree the
                      <Link
                        to={"#"}
                        className="font-medium transition-colors text-black hover:text-gray-900"
                      >
                        &nbsp;Terms and Conditions
                      </Link>
                    </Typography>
                  }
                  containerProps={{ className: "-ml-2.5" }}
                />




                
 
npm install naija-state-local-government
 
Example
//ES5
const NaijaStates = require('naija-state-local-government');
 
// ES6
import NaijaStates from 'naija-state-local-government';




 const [itemName, setItemName] = useState("");
  const [description, setDescription] = useState("");
  const [images, setImages] = useState([]);
  const [loading, setLoading] = useState(false);
  const [stateValue, setStateValue] = useState("");

  const handleStateChange = (event) => {
    setStateValue(event.target.value);
  };

  const handleImageUpload = (e) => {
    setImages([...e.target.files]);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);

    if (images.length !== 3) {
      toast.error("Please upload exactly 3 images");
      setLoading(false);
      return;
    }

    try {
      // Get the current user
      const user = auth.currentUser;
      if (!user) {
        throw new Error("User not found");
      }

      const imageUrls = await Promise.all(
        images.map(async (image) => {
          const storageRef = ref(storage, `donorItems/${image.name}`);
          const uploadTask = uploadBytesResumable(storageRef, image);
          await uploadTask;
          return await getDownloadURL(uploadTask.snapshot.ref);
        })
      );

      // Reference to the user document in Firestore
      const userDocRef = doc(db, "FoodConnectUsers", user.uid);

      // Reference to the 'MyPosts' collection inside the user document
      const myPostsCollectionRef = collection(userDocRef, "MyPosts");

      // Create a new post document inside 'MyPosts'
      const postDocRef = doc(myPostsCollectionRef);
      await setDoc(postDocRef, {
        itemName,
        description,
        state: stateValue,
        imageUrls,
        postedAt: new Date().toLocaleDateString("en-US", {
          year: "numeric",
          month: "short",
          day: "numeric",
        }), // Format: Aug 15, 2024
      });

      toast.success("Item posted successfully");
      setItemName("");
      setDescription("");
      setImages([]);
      setLoading(false);
    } catch (error) {
      console.error("Error posting item:", error);
      toast.error("Failed to post item. Please try again.");
      setLoading(false);
    }
  };




/////import React, { useEffect, useState } from "react";
import {
  collection,
  getDocs,
  doc,
  updateDoc,
  setDoc,
  getDoc,
} from "firebase/firestore";
import { auth, db } from "../../utils/firebase";

const ClaimFood = () => {
  const [allPosts, setAllPosts] = useState([]);
  const [error, setError] = useState(null);
  const [loading, setLoading] = useState(false);

  const fetchAllPosts = async () => {
    try {
      setLoading(true);
      const userQuerySnapshot = await getDocs(
        collection(db, "FoodConnectUsers")
      );
      const allPostsArray = [];

      for (const userDoc of userQuerySnapshot.docs) {
        const userId = userDoc.id;
        const userData = userDoc.data();

        try {
          const postsQuerySnapshot = await getDocs(
            collection(db, "FoodConnectUsers", userId, "MyPosts")
          );

          if (!postsQuerySnapshot.empty) {
            postsQuerySnapshot.forEach((postDoc) => {
              allPostsArray.push({
                ...postDoc.data(),
                id: postDoc.id,
                userId,
                donor: {
                  fullName: userData.fullName,
                  avatarUrl: userData.avatarUrl || "/images/Avatar.png",
                },
              });
            });
          }
        } catch (error) {
          console.error(`Error fetching posts for user ${userId}:`, error);
        }
      }

      setAllPosts(allPostsArray);
      if (allPostsArray.length === 0) {
        setError("No posts found for any users.");
      }
      setLoading(false);
    } catch (error) {
      console.error("Error fetching user data:", error);
      setError("Failed to fetch user data.");
      setLoading(false);
    }
  };

  const handleClaim = async (post) => {
    try {
      const user = auth.currentUser;
      if (!user) throw new Error("User not authenticated.");

      const postDocRef = doc(
        db,
        "FoodConnectUsers",
        post.userId,
        "MyPosts",
        post.id
      );
      const postDoc = await getDoc(postDocRef);

      if (postDoc.exists()) {
        const claimedBy = postDoc.data().claimedBy || [];
        if (!claimedBy.includes(user.uid)) {
          claimedBy.push(user.uid);

          await updateDoc(postDocRef, { claimedBy });

          // Add to user's MyClaims collection
          const myClaimsDocRef = doc(
            db,
            "FoodConnectUsers",
            user.uid,
            "MyClaims",
            post.id
          );
          await setDoc(myClaimsDocRef, { ...post, claimedAt: new Date() });

          fetchAllPosts();
        }
      }
    } catch (error) {
      console.error("Error claiming post:", error);
      setError("Failed to claim the item.");
    }
  };

  const isClaimedByUser = (post, userId) => {
    return post.claimedBy && post.claimedBy.includes(userId);
  };

  useEffect(() => {
    fetchAllPosts();
  }, []);

  return (
    <div>
      <h2>Claim Food Items</h2>
      {loading && <p>Loading...</p>}
      {error && <p>{error}</p>}
      {allPosts.length > 0
        ? allPosts.map((post, index) => {
            const user = auth.currentUser;
            const isClaimed = user && isClaimedByUser(post, user.uid);
            const claimCount = post.claimedBy ? post.claimedBy.length : 0;

            return (
              <div key={index} className="mb-4 border p-4 rounded-lg">
                {/* Display donor's profile image and full name */}
                <div className="flex items-center mb-4">
                  <img
                    src={post.donor.avatarUrl}
                    alt="Donor Avatar"
                    className="w-10 h-10 rounded-full object-cover mr-4"
                  />
                  <p className="font-bold">{post.donor.fullName}</p>
                </div>
                <h3 className="text-lg font-semibold">{post.itemName}</h3>
                <div className="flex gap-5">
                  <p>{post.state}</p>
                  <p>Posted at: {post.postedAt}</p>
                </div>
                <div className="flex w-full">
                <div className="grid grid-cols-3 grid-rows-2 w-full bg-red-600 mt-4">
                  {
                    <>
                      <img
                        src={post.imageUrls[0]}
                        className="object-cover w-full h-full col-span-2 row-span-2"
                      />
                      <img
                        src={post.imageUrls[1]}
                        className=" object-cover w-full h-full "
                      />
                      <img
                        src={post.imageUrls[2]}
                        className="object-cover w-full h-full bg-green-400  "
                      />
                    </>
                  }
                  {/* {post.imageUrls.map((url, i) => (
                  <img
                    key={i}
                    src={url}
                    className="w-[25%] object-cover"
                    alt={`Food item ${i + 1}`}
                  />
                ))} */}
                </div> 
                <p className="w-[45%]">{post.description}</p>
                </div>

                <button
                  onClick={() => handleClaim(post)}
                  disabled={isClaimed}
                  className={`mt-2 px-4 py-2 ${
                    isClaimed ? "bg-gray-400" : "bg-blue-500"
                  } text-white`}
                >
                  {isClaimed ? "Claimed" : "Claim"}
                </button>

                {claimCount > 0 && (
                  <p>
                    {isClaimed
                      ? `You and ${claimCount - 1} others claimed this item`
                      : `${claimCount} others have claimed this item`}
                  </p>
                )}
              </div>
            );
          })
        : !error && <p>No posts available</p>}
    </div>
  );
};

export default ClaimFood;

/// also implement a search, when you click on search input it should open a modal in the middle, with search input so you can click on a any checkbox or all 1: search for donors by name 2: search food items 3: you can add more for me and 4: select all search categoeries, als a recent for all the recent search
/// add pagination to the claims page

"Connect with donors to view their most recent posts."